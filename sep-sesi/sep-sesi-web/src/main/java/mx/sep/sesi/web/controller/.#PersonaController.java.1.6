/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.sep.sesi.web.controller;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import java.nio.charset.StandardCharsets;
import java.sql.Blob;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.imageio.ImageReadParam;
import javax.imageio.ImageReader;
import javax.imageio.stream.ImageInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;
import mx.sep.seguridad.modelo.UsuarioSeguridad;
import mx.sep.seguridad.util.SeguridadUtil;
import mx.sep.sesi.datos.vo.PersonaVO;
import mx.sep.sesi.datos.vo.UsuarioVO;
import mx.sep.sesi.modelo.Tses004Personas;
import mx.sep.sesi.modelo.join.TSES004PersonasJoin;
import mx.sep.sesi.servicios.PersonaService;
import mx.sep.sesi.servicios.util.LoggerUtil;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
//import org.apache.commons.codec.binary.Base64;

/**
 *
 * @author heriberto.perez
 */
@Controller
@RequestMapping(value = "/persona")
public class PersonaController {
    
    private static final Logger logger = Logger.getLogger(PersonaController.class);

    @Autowired
    private PersonaService personaService;

    
     @Autowired
    @Qualifier("dataSource")
    DataSource dataSource;
    


    @RequestMapping(value = "/insertaEmpleado", method = RequestMethod.POST)
    @ResponseBody


    public String insertaEmpleado(@RequestParam Short idPersona, @RequestParam String curp, @RequestParam String nombre, @RequestParam String primerApellido, @RequestParam String segundoApellido, @RequestParam Short inmuebleID, @RequestParam Short ur, @RequestParam Short cuadrante, @RequestParam String puesto, @RequestParam Short tipoSangre,
            @RequestParam String emergencia, @RequestParam String alergias, @RequestParam String enfermedad, @RequestParam("file") MultipartFile file) throws Exception {

        System.out.println("entrando a controller");
        System.out.println("File:" + file.getOriginalFilename());
        System.out.println("Tamaño:" + file.getSize());
        System.out.println("ContentType:" + file.getContentType());
        UsuarioSeguridad us = SeguridadUtil.getUsuarioActual();
        LoggerUtil.debug(this, "USERNAME " + us.getUsername());
        PersonaVO personaVO = new PersonaVO();
        personaVO.setIdPersona(idPersona);
        personaVO.setCurp(curp);
        personaVO.setNombre(nombre);
        personaVO.setPrimerApellido(primerApellido);
        personaVO.setSegundoApellido(segundoApellido);
        personaVO.setIdInmueble(inmuebleID);
        personaVO.setIdUR(ur);
        personaVO.setCuadrante(cuadrante);
        personaVO.setPuesto(puesto);
        personaVO.setTipoSangre(tipoSangre);
        personaVO.setEmergencia(emergencia);
        personaVO.setIdAlergia(alergias);
        personaVO.setEnfermedad(enfermedad);
        personaVO.setImagen(file.getBytes());
        String response = personaService.insertaEmpleado(personaVO);
        return "{\"msg\":\"" + response + "\"}";
    }

    @RequestMapping(value = "/insertaProveedor", method = RequestMethod.POST)
    @ResponseBody
    public String insertaProveedor(@RequestParam Short idPersona, @RequestParam String curp, @RequestParam String nombre, @RequestParam String primerApellido, @RequestParam String segundoApellido, @RequestParam Short inmuebleID, @RequestParam Short ur, @RequestParam Short cuadrante, @RequestParam String puesto, @RequestParam Short tipoSangre,
            @RequestParam String emergencia, @RequestParam String alergias, @RequestParam String enfermedad, @RequestParam("file") MultipartFile file) throws Exception {
        System.out.println("entrando a controller");
        System.out.println("File:" + file.getOriginalFilename());
        System.out.println("Tamaño:" + file.getSize());
        System.out.println("ContentType:" + file.getContentType());
        UsuarioSeguridad us = SeguridadUtil.getUsuarioActual();
        LoggerUtil.debug(this, "USERNAME " + us.getUsername());
        PersonaVO personaVO = new PersonaVO();
        personaVO.setIdPersona(idPersona);
        personaVO.setCurp(curp);
        personaVO.setNombre(nombre);
        personaVO.setPrimerApellido(primerApellido);
        personaVO.setSegundoApellido(segundoApellido);
        personaVO.setIdInmueble(inmuebleID);
        personaVO.setIdUR(ur);
        personaVO.setCuadrante(cuadrante);
        personaVO.setPuesto(puesto);
        personaVO.setTipoSangre(tipoSangre);
        personaVO.setEmergencia(emergencia);
        personaVO.setIdAlergia(alergias);
        personaVO.setEnfermedad(enfermedad);
        personaVO.setImagen(file.getBytes());
        String response = personaService.insertaProveedor(personaVO);
        return "{\"msg\":\"" + response + "\"}";
    }

    @RequestMapping(value = "/obtieneEmpleado/{idPersona}", method = RequestMethod.POST)
    @ResponseBody
    public Tses004Personas obtieneEmpleado(@PathVariable Short idPersona) throws Exception {
        UsuarioSeguridad us = SeguridadUtil.getUsuarioActual();
        LoggerUtil.debug(this, "USERNAME " + us.getUsername());
        Tses004Personas tses004Personas = new Tses004Personas();
        tses004Personas = personaService.obtenerPersona(idPersona);
        //String s = new String(tses004Personas.getFotografia(), StandardCharsets.UTF_8);
        //Base64 codec = new Base64();
        //Object encoded = codec.encode(s);
        //System.out.println(encoded);
        //tses004Personas.setFotografia(encoded);
        return tses004Personas;
    }

    @RequestMapping(value = "/listEmpleado", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody ResponseEntity<?> obtieneListaEmpleados(@RequestParam Integer idTipoPersona,
            @RequestParam Integer idUr, 
            @RequestParam String curp,
            @RequestParam String nombre,
            @RequestParam String primerApellido,
            @RequestParam String segundoApellido) {
        //System.out.println("lista"+idRol+idInmueble+idUr);
        UsuarioSeguridad us = SeguridadUtil.getUsuarioActual();
        LoggerUtil.debug(this, "Roles " + us.getRoles());

        List<TSES004PersonasJoin> lstEmpleados = null;

        try {

            lstEmpleados = personaService.obtenerAllPersonaRol(idTipoPersona,idUr,curp,nombre,primerApellido,segundoApellido);

            return new ResponseEntity<List<TSES004PersonasJoin>>(lstEmpleados, HttpStatus.OK);
        } catch (Exception exc) {
            exc.printStackTrace();
            return new ResponseEntity<String>(exc.getMessage(), HttpStatus.CONFLICT);
        }

    }
        
    
    @RequestMapping(value = "/nuevoEmpleado", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ModelAndView agregarEmpleado() {        
        ModelAndView modelAndView = new ModelAndView("Usuarios/empleados");
        return modelAndView;
    }
    
    @RequestMapping(value = "/nuevoProveedor", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ModelAndView agregarProveedor() {        
        ModelAndView modelAndView = new ModelAndView("Usuarios/proveedores");
        return modelAndView;
    }
    
    @RequestMapping(value = "/modificaEmpleado", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ModelAndView modificaEmpleados(
            @RequestParam Integer idPersona
    ) {

        ModelAndView modelAndView = new ModelAndView("Usuarios/empleados");
        modelAndView.addObject("idPersona", idPersona);

        return modelAndView;

    }
    
    @RequestMapping(value = "/modificaProveedor", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ModelAndView modificaProveedor(
            @RequestParam Integer idPersona
    ) {

        ModelAndView modelAndView = new ModelAndView("Usuarios/proveedores");
        modelAndView.addObject("idPersona", idPersona);

        return modelAndView;

    }
    
    @RequestMapping(value = "/consultaEmpleado", method = RequestMethod.GET)
    public ModelAndView consultaEmpleado(
    ) {

        ModelAndView modelAndView = new ModelAndView("Usuarios/consultaEmpleados");
        return modelAndView;

    }
    
    @RequestMapping(value = "/consultaProveedor", method = RequestMethod.GET)
    public ModelAndView consultaProveedor(
    ) {

        ModelAndView modelAndView = new ModelAndView("Usuarios/consultaProveedores");
        return modelAndView;

    }

    /*@RequestMapping(value = "/imprimirGafete", method = RequestMethod.POST)
    @ResponseBody
    public ResponseEntity<?> imprimirGafete(HttpServletResponse response, HttpServletRequest request,@RequestBody String[] arrayUsuarios) throws IOException {
        String mensaje = "";
        
         Map<String, Object> parametros = new HashMap<String, Object>();
         StringBuilder personas = new StringBuilder();
        try{
            List<String> lstUsuarios = Arrays.asList(arrayUsuarios);
            int i = 0;
            for(String id : lstUsuarios){
                if (i==0)
                personas.append(id);
                else 
                  personas.append("," + id);  
                ++i;
                System.out.println("controller seleccionados ==> " + id);
            }
            String rutaSer = request.getSession().getServletContext()
                .getRealPath("/");
            parametros.put("pCriterio", personas.toString());
            parametros.put("PATH_WEB",rutaSer);
             InputStream jasperStream = this.getClass().getResourceAsStream("/mx/sep/sesi/reportes/credencial.jasper");
            JasperReport jasperReport = (JasperReport) JRLoader.loadObject(jasperStream);
            JasperPrint jasperPrint = JasperFillManager.fillReport(
                    jasperReport, parametros,
                    dataSource.getConnection());

            response.setContentType("application/x-pdf");
            response.setHeader("Content-disposition", "inline; filename=Gafete_" + arrayUsuarios + ".pdf");

            final OutputStream outStream = response.getOutputStream();
            JasperExportManager.exportReportToPdfStream(jasperPrint, outStream);
            
            mensaje = "Proceso correcto...";
        }catch(Exception e){
            mensaje = "ócurrio un error...";
            return new ResponseEntity<String>(mensaje, HttpStatus.CONFLICT);
        }
        return new ResponseEntity<String>(mensaje, HttpStatus.OK);    
    }*/
    
     @RequestMapping(value = "/imprimirGafete", method = RequestMethod.POST)
    public ResponseEntity<?> imprimirGafete(HttpServletResponse response, HttpServletRequest request,@RequestBody String[] arrayUsuarios) throws IOException {
        String mensaje = "";
        Map<String, Object> parametros = new HashMap<String, Object>();
        
         StringBuilder personas = new StringBuilder();
        try{
            List<String> lstUsuarios = Arrays.asList(arrayUsuarios);
            int i = 0;
            for(String id : lstUsuarios){
                if (i==0)
                personas.append(id);
                else 
                  personas.append("," + id);  
                ++i;
                System.out.println("controller seleccionados ==> " + id);
            }
            String rutaSer = request.getSession().getServletContext()
                .getRealPath("/");
        parametros.put("idRvoe", personas.toString());

    

            InputStream jasperStream = this.getClass().getResourceAsStream("/mx/sep/sesi/reportes/reporteHallazgos.jasper");
            JasperReport jasperReport = (JasperReport) JRLoader.loadObject(jasperStream);
            JasperPrint jasperPrint = JasperFillManager.fillReport(
                    jasperReport, parametros,
                    dataSource.getConnection());

            response.setContentType("application/x-pdf");
            response.setHeader("Content-disposition", "inline; filename=ReporteHallazgos_" + arrayUsuarios + ".pdf");

            final OutputStream outStream = response.getOutputStream();
            JasperExportManager.exportReportToPdfStream(jasperPrint, outStream);

        } catch (Exception e) {
             mensaje = "ócurrio un error...";
            return new ResponseEntity<String>(mensaje, HttpStatus.CONFLICT);
        }
        return new ResponseEntity<String>(mensaje, HttpStatus.OK);    
    }

    }
    
